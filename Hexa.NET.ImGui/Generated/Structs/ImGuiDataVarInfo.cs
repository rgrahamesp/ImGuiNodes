// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDataVarInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDataType Type;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint Count;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint Offset;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDataVarInfo(ImGuiDataType type = default, uint count = default, uint offset = default)
		{
			Type = type;
			Count = count;
			Offset = offset;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiDataVarInfoPtr : IEquatable<ImGuiDataVarInfoPtr>
	{
		public ImGuiDataVarInfoPtr(ImGuiDataVarInfo* handle) { Handle = handle; }

		public ImGuiDataVarInfo* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiDataVarInfoPtr Null => new ImGuiDataVarInfoPtr(null);

		public ImGuiDataVarInfo this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiDataVarInfoPtr(ImGuiDataVarInfo* handle) => new ImGuiDataVarInfoPtr(handle);

		public static implicit operator ImGuiDataVarInfo*(ImGuiDataVarInfoPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiDataVarInfoPtr left, ImGuiDataVarInfoPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiDataVarInfoPtr left, ImGuiDataVarInfoPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiDataVarInfoPtr left, ImGuiDataVarInfo* right) => left.Handle == right;

		public static bool operator !=(ImGuiDataVarInfoPtr left, ImGuiDataVarInfo* right) => left.Handle != right;

		public bool Equals(ImGuiDataVarInfoPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiDataVarInfoPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiDataVarInfoPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDataType Type => ref Unsafe.AsRef<ImGuiDataType>(&Handle->Type);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint Count => ref Unsafe.AsRef<uint>(&Handle->Count);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint Offset => ref Unsafe.AsRef<uint>(&Handle->Offset);
	}

}
